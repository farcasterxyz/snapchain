syntax = "proto3";

import "blocks.proto";

service ReplicationService {
  rpc GetShardSnapshotMetadata(GetShardSnapshotMetadataRequest) returns (GetShardSnapshotMetadataResponse);
  rpc GetShardTransactions(GetShardTransactionsRequest) returns (GetShardTransactionsResponse);

  rpc GetTrieDebugInfo(GetTrieDebugInfoRequest) returns (GetTrieDebugInfoResponse);

  // IMPORTANT: this is a temporary endpoint for debugging purposes only. It will eventually be
  // removed, and SHOULD NOT be used for production purposes.
  rpc GetReplicationTransactionsByFid(GetReplicationTransactionsByFidRequest)
    returns (GetReplicationTransactionsByFidResponse);
}

message GetTrieDebugInfoRequest {
  uint32 shard_id = 1;
  uint64 fid = 2;
  uint64 height = 3;
}

message GetTrieDebugInfoResponse {
  repeated TrieNodeDebugInfo debug_info = 1;
}

message TrieNodeDebugInfo {
  bytes xprefix = 1;
  bytes hash = 2;
  repeated ChildHashDebugInfo child_hashes = 3;
}

message ChildHashDebugInfo {
  uint32 char = 1;
  bytes hash = 2;
}

message GetShardSnapshotMetadataRequest {
  uint32 shard_id = 1;
}

message ShardSnapshotMetadata {
  uint32 shard_id = 1;
  uint64 height = 2;
  uint64 timestamp = 3;
  uint64 highest_fid = 4;  
  optional ShardChunk shard_chunk = 5;
  optional Block block = 6;
}

message GetShardSnapshotMetadataResponse {
  repeated ShardSnapshotMetadata snapshots = 1;
}

message GetShardTransactionsRequest {
  uint32 shard_id = 1;
  uint64 height = 2;
  oneof cursor {
    bytes page_token = 3;
    uint64 start_fid = 4;
  };
  SortOrderTypes system_message_types = 5;
  SortOrderTypes user_message_types = 6;
}

// A list of event/message types. The RPC will return messages in this order
message SortOrderTypes {
  repeated uint32 sort_order = 1;
}

message GetShardTransactionsResponse {
  repeated Transaction transactions = 1;
  optional bytes next_page_token = 2;
}

message GetReplicationTransactionsByFidRequest {
  uint64 fid = 1;
  SortOrderTypes system_message_types = 2;
  SortOrderTypes user_message_types = 3;
}

message GetReplicationTransactionsByFidResponse {
  Transaction transaction = 1;
}
